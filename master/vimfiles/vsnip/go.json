{
  "iota": {
    "prefix": "iota",
    "body": [
      "const (",
      "\t$1 = ${2:1 << }iota",
      ")"
    ],
    "description": "Snippet for an iota"
  },
  "function declaration": {
    "prefix": ["fu", "func"],
    "body": [
      "func ${1:name}($2) $3 {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a function declaration"
  },
  "method declaration": {
    "prefix": "meth",
    "body": [
      "func (${1:rx} ${2:type}) ${3:name}($4) $5 {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a method declaration"
  },
  "if statement": {
    "prefix": "if",
    "body": [
      "if ${1:${2:assign}; }${3:expr} {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for an if statement"
  },
  "else branch": {
    "prefix": "else",
    "body": [
      "else {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for an else branch"
  },
  "error handling": {
    "prefix": "iferr",
    "body": [
      "if err != nil {",
      "\t${1:return ${2:${3:_}, }${4:err}}",
      "}"
    ],
    "description": "Snippet for an error handling"
  },
  "switch statement": {
    "prefix": ["sw", "switch"],
    "body": [
      "switch ${1:expr} {",
      "case ${2:expr}:",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a switch statement"
  },
  "case caluse": {
    "prefix": "case",
    "body": "case ${1:exp}:",
    "description": "Snippet for a case clause"
  },
  "for statement": {
    "prefix": ["fo", "for"],
    "body": [
      "for ${1:i} = 0; $1 < ${2:count}; $1${3:++} {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a for statement"
  },
  "for range statement": {
    "prefix": ["rng", "range"],
    "body": [
      "for ${1:_, }${2:var} := range ${3:var} {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a for range statement"
  },
  "select statement": {
    "prefix": ["sel", "select"],
    "body": [
      "select {",
      "case ${1:expr}:",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a select statement"
  },
  "defer statement": {
    "prefix": ["def", "defer"],
    "body": "defer ${1:name}($0)",
    "description": "Snippet for a defer statement"
  },
  "append function": {
    "prefix": ["app", "append"],
    "body": "$1 = append($1, $2)",
    "description": "Snippet for an append function"
  },
  "copy function": {
    "prefix": ["cp", "copy"],
    "body": "copy(${2:dst}, ${1:src})",
    "description": "Snippet for a copy function"
  },
  "delete function": {
    "prefix": ["del", "delete"],
    "body": "delete(${1:m}, ${2:k})",
    "description": "Snippet for a delete function"
  },
  "init function": {
    "prefix": "init",
    "body": [
      "func init() {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for an init function"
  },
  "benchmark function": {
    "prefix": "bench",
    "body": [
      "func Benchmark$1(b *testing.B) {",
      "\tfor ${2:i} := 0; $2 < t.B; $2++ {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "Snippet for a test function"
  },
  "test function": {
    "prefix": "test",
    "body": [
      "func Test$1(t *testing.T) {",
      "\t$0",
      "}"
    ],
    "description": "Snippet for a test function"
  },
  "+build constraint": {
    "prefix": "build",
    "body": "// +build $0",
    "description": "Snippet for a +build constraint"
  },
  "go:generate directive": {
    "prefix": "gen",
    "body": "//go:generate $0",
    "description": "Snippet for a go:generate directive"
  }
}
